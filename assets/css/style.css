/* Google Fonts import */
@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Oswald:wght@200..700&display=swap');

/* Because of CSS specificity, the order of our style rules matters. Must start with the most general rules at the top of the stylesheet and the rules must get more specific all the way down. I.e. most general styles at top, most specific styles at bottom */
/* asterisk wildcard selector/ universal selector goes at top of stylesheet so we can override it when required */
/* Asterisk wildcard selector/universal selector to override default styles added by the browser */
/* We are using asterisk selector in this instance to set padding and margin to 0 which overrides browser defaults. We are setting the box-sizing property on all our elements to border-box so that later when we set the height or width to an element, it will be applied to the entire element incl. the border */
* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

/* General styles */
/* min-height property with value of 100vh allows the body to stretch larger than the height of the screen when there is enough content on the page that the user needs to scroll */
/* we set the display to flex to activate flexbox and the flex direction to column so that our elements will still show underneath each other */
body {
   min-height: 100vh; 
   display: flex;
   flex-direction: column;
   /* Generic project styles */
   color: #3a3a3a;
   font-family: 'Lato', sans-serif;
}

h1, h2, h3 {
    font-family: 'Oswald', sans-serif;
    text-transform: uppercase;
    /* letter spacing provides breathing space between the letters */
    letter-spacing: 2px;
    color: #252525;
}

/* Header */
header {
    background-color: #ffffff;
    /* padding left and right has been added here to prevent our text from sticking to the side of the screen */
    padding: 0 1rem;
    /* as we want the nav bar to scroll along, we have set it's position to fixed */
    position: fixed;
    /* we use a high z-index (in this case 99) to make sure it is layered on top of any other elements that might have a z-index later */
    z-index: 99;
    /* we had to give the header a width of 100% here because without it, it will revert to content width because we made its position fixed. 
    Giving the header a width of 100% makes sure it will fill the width of the screen again */
    width: 100%;
    /* box-shadow property indicates that this element (the header) is layered on top of the other content. 
    This property creates a shadow over the elements below it, which adds depth and is more visually appealing for the user. 
    This property has 4 values (first 2 are mandatory):
    1 = horizontal offset - negative values offset this to the left of the element, 
    positive values offset to the right. Don't need this here as our header is full width so set to 0.
    2 = vertical offset - positive values displays the shadow below the element, negatives values 
    displays shadows above it. We only want a small shadow here so have set 2px.
    3 = sets the blur i.e. how soft or hard the shadow will look. 
    4 = colour value specified here is dark grey. If we didn't set any value, 
    the default colour the browser would apply is black */
    box-shadow: 0 2px 2px #3a3a3a;
    /* adding display flec to the header makes the nav bar items show in a row (default flex position if none is specified is row) */
    display: flex;
    justify-content: space-between;
    /* this property makes all the nav bar items be displayed in a line vertically */ 
    align-items: baseline;
}

/* this style rules targets any tag which is a descendent of the header. The property of text decoration none removes the underline under links */
header  a {
    text-decoration: none;
    /* this property means that any tags which are a descendent of the header will inherit their text colour from the body */
    color: inherit;
}


#menu {
    font-size: 110%;
    letter-spacing: 4px;
    list-style-type: none;
}

 /* this selector targets the list items inside the menu */ 
#menu > li {
    /* margin bottom 1em means that the list items inside the menu are more spaced out vertically */
    margin-bottom: 1em;
}

/* we created the active class to show users where they are in the website by giving the links 
in the menu a visual cue when the user is on that particular page. */
.active {
    border-bottom: 1px solid #3a3a3a;
}

/* Nav bar styles with dropdown toggle */
nav {
    /* position absolute takes an element outside the normal flow of the page structure.
     It is positioned relative to the nearest positioned ancestor, which in this case is the header. */
    position: absolute;
    /* had to put the background color in here to make the header look like a single object when it is opened */
    background-color: #ffffff;
    width: 100%;
    /* the left property with value 0 aligns the nav bar directly against the left of the screen */ 
    left: 0;
    padding: 0 1rem;
    box-shadow: 0 2px 2px #3a3a3a;
    /* setting the display to none means the nav bar items are hidden until the user clicks to open them */ 
    display: none;
    /* top property means that the top of the nav bar should start at the bottom of its parent. 
    0% would represent the top of the parent, 100% represents the bottom of it */
    top: 100%;
}

/* Nav toggle */
/* this pseudo class is saying that when the nav bar toggle is checked, the sibling nav element should be displayed */
#nav-toggle:checked~nav {
    display: block;
}

/* hides the checkbox */
#nav-toggle {
    display: none;
}

.nav-toggle-label {
    font-size: 2rem;
}

/* Main Content */
main {
    /* Make main element take up any surplus space to push footer down */
    flex: 1 0 auto;
    /* because we set header position to fixed earlier, this took the header out of the normal flow of elements on the main page and covered the top of the main elements. 
    To fix this, we add a margin-top of 47px to our main element to push the content down so we can see it underneath our nav bar once again */
    margin-top: 47px;
}

/* Hero section */
#hero {
    /* this height property means the image has space to show up */
    height: 600px;
    /* the width of 100% means the image will span the entire width of the screen */
    width: 100%;
    /* this file path is a relative file path so it will show correctly on our deployed site (absolute file paths don't always display correctly on github pages) to go up a level to another folder, we use ../ in the relative file path.
    no repeat means the image does not repeat, typing center twice means the image will be centered both horizontally and vertically. The cover property means the image will automatically size itself so it covers the entire hero section without
    distorting.*/
    background: url("../images/hero-image.webp") no-repeat center center/cover;
    position: relative;
}

#cover-text {
    /* the a value in rgba sets the transparency of the colour applied */ 
    background-color: rgba(241, 109, 107, .7);
    font-size: 130%;
    /* because we set the position on the hero id to relative, when we set the position on the cover text id to absolute, this means it will be placed relative to the hero section */
    position: absolute;
    /* setting the property to bottom, means that the cover text shows close to the bottom of the hero image so it doesn't ovelap the runners face. The value of 30px means it doesn't stick directly to the bottom of the image either */
    bottom: 30px;
    /* this means it does not take up the full width of the screen */
    width: 80%;
    min-height: 200px;
    /* the padding at the top means that the text does not stick to the top of the cover text div */
    padding-top: 40px;
    /* the padding on the left means that the text is spaced out abit from the edge of the screen */
    padding-left: 10px;
}

/* this selector targets any h2 and h3 elements that are a direct child of the cover-text div */
#cover-text > h2, #cover-text > h3 {
    /* colour set to white to match well with our image and the overlay */
    color: #ffffff;
}

/* Footer */
#social-networks {
    /* to centre our icons, we use text-align as icons are treated as text for CSS purposes */
    text-align: center;
    /* the padding here has added vertically breathing space above and below our icons */
    padding: 20px 0;
    /* we've used flexbox here to space our icons evenly along the footer */
    display: flex;
    justify-content: space-evenly;
    /* as the we inputted the icons as list icons, they display by default with bullet points, this css removes them */
    list-style-type: none;
}

/* font awesome added all the icons as i elements so our css below targets all i elements that are descendants of the social networks ul */
#social-networks i {
    font-size: 160%;
    padding: 5%;
    color: #3a3a3a
}

/* Note that CSS styles for different screen sizes are applied with the styles for smallest screens at the top and styles for biggest screens at the bottom */

/* Media query: tablets and larger (768px and up). These properties between the curly brackets after @media screen and..... are only applied if the screen size of the device is 768px or larger */
@media screen and (min-width: 768px) {
    /* Header */
    nav {
        display: block;
        position: relative;
        /* hides the box shadow as we don't need it on a larger screen */
        box-shadow: none;
        width: fit-content;
        padding-right: 1rem;
    }

    #menu {
        /* display flex here means that the menu items (denoted with the id menu inside the ul element in the html code) will be displayed in a row */
        display: flex;
    }

    /* gives the list items breathing space by adding padding to the left of each list item in the menu so they do not stick together */
    #menu > li {
        padding-left: 1rem;
    }

    /* Hides the toggle for the drop down menu - we do not need this on a larger screen as all the menu items are displayed in a row */
    .nav-toggle-label {
        display: none;
    }

    /* This CSS makes use of our extra screen space on a larger screen to make the logo larger and stand out more so it has a bigger impact */
    #logo {
        font-size: 200%;
        line-height: 75px;
        margin: 0 0.5rem;
    }

    /* Main content */
    main {
        /* Push main content down to accommodate larger header */
        margin-top: 79px;
    }  

    /* hero */
    /* cover text width of 80% that we applied for smaller screens is abit much on larger screens as our text is not long enough to take up the surplus space. 
    Changing the width in the media queries sections overrides this. */
    #cover-text {
        width: 300px;
        /* This property positions the cover text 50px from the right on larger screens so that we are 
        making better use of the additional screen space (real estate) that is available on a larger screen */
        right: 50px;
    }

}

/* This CSS creates an indication that a link is clickable (by adding a line underneath). 
Note that this only works on laptops and desktops which have a mouse - does not work with touchscreens, 
therefore we have only applied this pseudo hover class to the largest of screens */
/* large devices (laptops and desktops, 992px and up) */
@media screen and (min-width: 992px) {
    #menu a:hover {
        border-bottom: 1px solid #3a3a3a;
    }
}
